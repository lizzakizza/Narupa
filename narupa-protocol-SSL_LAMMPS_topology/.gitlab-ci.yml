image: intangiblerealitieslab/conda-light-39
stages:
  - stage1
  - test_python
  - deploy

variables:
  python_version: "3.9"
  min_python_version: "3.7"
  build_command: "conda build --prefix-length=100 --no-test --no-anaconda-upload "
  mypy_command: mypy --ignore-missing-imports --show-error-codes ./python-libraries/narupa-core/src/narupa/ ./python-libraries/narupa-ase/src/narupa/ ./python-libraries/narupa-essd/src/narupa/ ./python-libraries/narupa-mdanalysis/src/narupa/ ./python-libraries/narupa-openmm/src/narupa/ ./python-libraries/narupa-lammps/src/narupa/ ./python-libraries/prototypes/

release:
  image: intangiblerealitieslab/dotnet-conda
  stage: deploy
  only:
    - master
    - develop
  artifacts:
    paths:
      - python-libraries
      - csharp-libraries/Narupa.Protocol/bin/Release
  script:
    - conda install -c conda-forge mpi4py conda
    - ./compile.sh

# triggers a build of the narupa documentation repo. 
trigger_docs_build:
  stage: deploy
  script:
    - "curl -X POST -F token=${DOCS_TRIGGER_TOKEN} -F ref=master https://gitlab.com/api/v4/projects/11677300/trigger/pipeline"

test_python:
  stage: test_python
  before_script:
    - mamba install -c conda-forge -c ./conda-bld ${PIN_VERSIONS} mpi4py cython narupa-server narupa-lammps
    - python -m pip install -r python-libraries/requirements.test
  script:
    - python -m pytest --cov=narupa python-libraries -n auto -m 'not serial' --junitxml=report_not_serial.xml
    - python -m pytest --cov=narupa --cov-append python-libraries -n0 -m 'serial' --junitxml=report_serial.xml
    - coverage html
    - coverage xml

  artifacts:
    paths:
      - htmlcov
      - csharp-libraries/Narupa.Protocol/bin/Release
    reports:
      junit:
        - report_not_serial.xml
        - report_serial.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

test_python_minimum:
  stage: test_python
  image: intangiblerealitieslab/conda-light-37
  variables:
    python_version: "3.7"
  before_script:
    # we pin openmpi because openmpi=4.1.3 does not install libmpi.so.40 that
    # mpi4py=3.1.3 seems to require. The solution is taken from
    # https://github.com/theislab/cellrank/issues/864
    - export PIN_VERSIONS="python=$python_version ase=3.21.0 openmm=7.4.0 openmpi=4.1.2"
    - mamba install -c omnia -c conda-forge -c ./conda-bld ${PIN_VERSIONS} mpi4py narupa-server narupa-lammps
    - python -m pip install -r python-libraries/requirements.test
  script:
    - python -m pytest python-libraries -n auto -m 'not serial' --junitxml=report_not_serial_minimum.xml
    - python -m pytest python-libraries -n0 -m 'serial' --junitxml=report_serial_minimum.xml
  artifacts:
    reports:
      junit:
        - report_not_serial_minimum.xml
        - report_serial_minimum.xml

mypy_types:
  stage: test_python
  before_script:
    - mamba install -c omnia -c conda-forge -c ./conda-bld ${PIN_VERSIONS} mpi4py
    - python -m pip install -r python-libraries/requirements.test
  script:
    - $mypy_command

test_dotnet:
  image: mcr.microsoft.com/dotnet/sdk:2.1
  stage: stage1
  variables:
    test_path: "csharp-libraries"
  script:
    - ./compile.sh --no-python
    - "cd $test_path"
    - dotnet add Narupa.Protocol.Test package JunitXml.TestLogger
    - dotnet add Essd.Test package JunitXml.TestLogger
    - dotnet test --logger:"junit;LogFilePath=..\artifacts\{assembly}-test-result.xml;MethodFormat=Class;FailureBodyFormat=Verbose"
  artifacts:
    reports:
      junit:
        - ./**/*test-result.xml

test_compile_python:
  stage: stage1
  before_script:
    - mamba install -c conda-forge mpi4py openmm
  script:
    - ./compile.sh --no-dotnet

build_conda:
    stage: stage1
    script:
        # Test that the repo is sane and does not contain superfluous __init__ file
        - bash maintainers/check_extra_init_files.sh
        # We use the number of commits in the branch to set the version number.
        - export NARUPA_BUILD_VERSION="0.1.$(git rev-list --count HEAD)"
        - export NARUPA_LICENSE_PATH="$(readlink -f LICENSE)"
        - export MIN_PYTHON_VERSION=$min_python_version
        # Configure the environment. We need conda-forge and omnia to get the
        # science related packages (openmm, ase, mdanalysis)
        - conda config --env --add channels conda-forge
        - conda config --env --add channels omnia
        - mamba install python=$python_version conda-build grpcio-tools conda-verify
        # Compiling the prototypes
        - python python-libraries/narupa-core/setup.py compile_proto --proto-dir=protocol
        # The order of the packages is defined by their requirements.
        - |
            $build_command \
              python-libraries/narupa-essd/conda \
              python-libraries/narupa-core/conda \
              python-libraries/narupa-openmm/conda \
              python-libraries/narupa-ase/conda \
              python-libraries/narupa-mdanalysis/conda \
              python-libraries/narupa-lammps/conda \
              python-libraries/narupa-server/conda
        - cp -r /miniconda/conda-bld .
    artifacts:
        paths:
          - conda-bld

upload_conda:
    stage: deploy
    only:
      - master
    script:
      - mamba install -c conda-forge anaconda
      # The login token may be used by a failed build already. If we are asked
      # if we want it back, we say yes. Hence the echo Y.
      - echo Y | anaconda login --username irl_bot --password $ANACONDA_PASSWORD
      # Anaconda will complain if the given version of a package is already
      # there. Until we have some visioning, we force the upload.
      - anaconda  upload --user irl conda-bld/noarch/narupa-*.tar.bz2 --force
      # Do not fail the build if we cannot logout.
      - anaconda logout || echo "Could not logout. Too bad."
