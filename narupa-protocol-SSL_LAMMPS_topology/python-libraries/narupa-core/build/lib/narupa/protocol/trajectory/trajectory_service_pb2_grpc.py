# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from narupa.protocol.trajectory import get_frame_pb2 as narupa_dot_protocol_dot_trajectory_dot_get__frame__pb2


class TrajectoryServiceStub(object):
    """A service which provides access to frames of a trajectory, which may either be precomputed or represent a live simulation. It can also be used to obtain one or more frames on demand, allowing molecules or trajectories to be generated based on requests 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubscribeFrames = channel.unary_stream(
                '/narupa.protocol.trajectory.TrajectoryService/SubscribeFrames',
                request_serializer=narupa_dot_protocol_dot_trajectory_dot_get__frame__pb2.GetFrameRequest.SerializeToString,
                response_deserializer=narupa_dot_protocol_dot_trajectory_dot_get__frame__pb2.GetFrameResponse.FromString,
                )
        self.SubscribeLatestFrames = channel.unary_stream(
                '/narupa.protocol.trajectory.TrajectoryService/SubscribeLatestFrames',
                request_serializer=narupa_dot_protocol_dot_trajectory_dot_get__frame__pb2.GetFrameRequest.SerializeToString,
                response_deserializer=narupa_dot_protocol_dot_trajectory_dot_get__frame__pb2.GetFrameResponse.FromString,
                )
        self.GetFrames = channel.unary_stream(
                '/narupa.protocol.trajectory.TrajectoryService/GetFrames',
                request_serializer=narupa_dot_protocol_dot_trajectory_dot_get__frame__pb2.GetFrameRequest.SerializeToString,
                response_deserializer=narupa_dot_protocol_dot_trajectory_dot_get__frame__pb2.GetFrameResponse.FromString,
                )
        self.GetFrame = channel.unary_unary(
                '/narupa.protocol.trajectory.TrajectoryService/GetFrame',
                request_serializer=narupa_dot_protocol_dot_trajectory_dot_get__frame__pb2.GetFrameRequest.SerializeToString,
                response_deserializer=narupa_dot_protocol_dot_trajectory_dot_get__frame__pb2.GetFrameResponse.FromString,
                )


class TrajectoryServiceServicer(object):
    """A service which provides access to frames of a trajectory, which may either be precomputed or represent a live simulation. It can also be used to obtain one or more frames on demand, allowing molecules or trajectories to be generated based on requests 
    """

    def SubscribeFrames(self, request, context):
        """Subscribe to a continuous updating source of frames. Frames are added to the stream when they are available 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeLatestFrames(self, request, context):
        """Subscribe to a continuous updating source of frames. The client gets the latest available frame at the time of transmission. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFrames(self, request, context):
        """Request a set of frames specified in the request 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFrame(self, request, context):
        """Request a specific frame. This may be used to provider a 'molecule-on-demand' service 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TrajectoryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubscribeFrames': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeFrames,
                    request_deserializer=narupa_dot_protocol_dot_trajectory_dot_get__frame__pb2.GetFrameRequest.FromString,
                    response_serializer=narupa_dot_protocol_dot_trajectory_dot_get__frame__pb2.GetFrameResponse.SerializeToString,
            ),
            'SubscribeLatestFrames': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeLatestFrames,
                    request_deserializer=narupa_dot_protocol_dot_trajectory_dot_get__frame__pb2.GetFrameRequest.FromString,
                    response_serializer=narupa_dot_protocol_dot_trajectory_dot_get__frame__pb2.GetFrameResponse.SerializeToString,
            ),
            'GetFrames': grpc.unary_stream_rpc_method_handler(
                    servicer.GetFrames,
                    request_deserializer=narupa_dot_protocol_dot_trajectory_dot_get__frame__pb2.GetFrameRequest.FromString,
                    response_serializer=narupa_dot_protocol_dot_trajectory_dot_get__frame__pb2.GetFrameResponse.SerializeToString,
            ),
            'GetFrame': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFrame,
                    request_deserializer=narupa_dot_protocol_dot_trajectory_dot_get__frame__pb2.GetFrameRequest.FromString,
                    response_serializer=narupa_dot_protocol_dot_trajectory_dot_get__frame__pb2.GetFrameResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'narupa.protocol.trajectory.TrajectoryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TrajectoryService(object):
    """A service which provides access to frames of a trajectory, which may either be precomputed or represent a live simulation. It can also be used to obtain one or more frames on demand, allowing molecules or trajectories to be generated based on requests 
    """

    @staticmethod
    def SubscribeFrames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/narupa.protocol.trajectory.TrajectoryService/SubscribeFrames',
            narupa_dot_protocol_dot_trajectory_dot_get__frame__pb2.GetFrameRequest.SerializeToString,
            narupa_dot_protocol_dot_trajectory_dot_get__frame__pb2.GetFrameResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeLatestFrames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/narupa.protocol.trajectory.TrajectoryService/SubscribeLatestFrames',
            narupa_dot_protocol_dot_trajectory_dot_get__frame__pb2.GetFrameRequest.SerializeToString,
            narupa_dot_protocol_dot_trajectory_dot_get__frame__pb2.GetFrameResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFrames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/narupa.protocol.trajectory.TrajectoryService/GetFrames',
            narupa_dot_protocol_dot_trajectory_dot_get__frame__pb2.GetFrameRequest.SerializeToString,
            narupa_dot_protocol_dot_trajectory_dot_get__frame__pb2.GetFrameResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFrame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/narupa.protocol.trajectory.TrajectoryService/GetFrame',
            narupa_dot_protocol_dot_trajectory_dot_get__frame__pb2.GetFrameRequest.SerializeToString,
            narupa_dot_protocol_dot_trajectory_dot_get__frame__pb2.GetFrameResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
